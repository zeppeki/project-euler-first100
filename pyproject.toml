[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "project-euler-first100"
version = "0.1.0"
description = "Project Euler First 100 Problems - Systematic problem solving with learning optimization"
authors = [
    {name = "zeppeki", email = "zeppeki@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Mathematics",
]

dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/zeppeki/project-euler-first100"
Repository = "https://github.com/zeppeki/project-euler-first100"
Issues = "https://github.com/zeppeki/project-euler-first100/issues"
Documentation = "https://github.com/zeppeki/project-euler-first100/tree/main/docs"

[tool.setuptools.packages.find]
where = ["."]
include = ["problems*", "solutions*", "tests*"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "LOG", # flake8-logging-format
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "FURB", # flake8-furb
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
    "PLR0916", # too many boolean expressions
    "PLR0917", # too many positional arguments
    "PLR0918", # too many boolean expressions
    "PLR0919", # too many boolean expressions
    "PLR0920", # too many boolean expressions
    "PLR0921", # too many boolean expressions
    "PLR0922", # too many boolean expressions
    "PLR0923", # too many boolean expressions
    "PLR0924", # too many boolean expressions
    "PLR0925", # too many boolean expressions
    "PLR0926", # too many boolean expressions
    "PLR0927", # too many boolean expressions
    "PLR0928", # too many boolean expressions
    "PLR0929", # too many boolean expressions
    "PLR0930", # too many boolean expressions
    "PLR0931", # too many boolean expressions
    "PLR0932", # too many boolean expressions
    "PLR0933", # too many boolean expressions
    "PLR0934", # too many boolean expressions
    "PLR0935", # too many boolean expressions
    "PLR0936", # too many boolean expressions
    "PLR0937", # too many boolean expressions
    "PLR0938", # too many boolean expressions
    "PLR0939", # too many boolean expressions
    "PLR0940", # too many boolean expressions
    "PLR0941", # too many boolean expressions
    "PLR0942", # too many boolean expressions
    "PLR0943", # too many boolean expressions
    "PLR0944", # too many boolean expressions
    "PLR0945", # too many boolean expressions
    "PLR0946", # too many boolean expressions
    "PLR0947", # too many boolean expressions
    "PLR0948", # too many boolean expressions
    "PLR0949", # too many boolean expressions
    "PLR0950", # too many boolean expressions
    "PLR0951", # too many boolean expressions
    "PLR0952", # too many boolean expressions
    "PLR0953", # too many boolean expressions
    "PLR0954", # too many boolean expressions
    "PLR0955", # too many boolean expressions
    "PLR0956", # too many boolean expressions
    "PLR0957", # too many boolean expressions
    "PLR0958", # too many boolean expressions
    "PLR0959", # too many boolean expressions
    "PLR0960", # too many boolean expressions
    "PLR0961", # too many boolean expressions
    "PLR0962", # too many boolean expressions
    "PLR0963", # too many boolean expressions
    "PLR0964", # too many boolean expressions
    "PLR0965", # too many boolean expressions
    "PLR0966", # too many boolean expressions
    "PLR0967", # too many boolean expressions
    "PLR0968", # too many boolean expressions
    "PLR0969", # too many boolean expressions
    "PLR0970", # too many boolean expressions
    "PLR0971", # too many boolean expressions
    "PLR0972", # too many boolean expressions
    "PLR0973", # too many boolean expressions
    "PLR0974", # too many boolean expressions
    "PLR0975", # too many boolean expressions
    "PLR0976", # too many boolean expressions
    "PLR0977", # too many boolean expressions
    "PLR0978", # too many boolean expressions
    "PLR0979", # too many boolean expressions
    "PLR0980", # too many boolean expressions
    "PLR0981", # too many boolean expressions
    "PLR0982", # too many boolean expressions
    "PLR0983", # too many boolean expressions
    "PLR0984", # too many boolean expressions
    "PLR0985", # too many boolean expressions
    "PLR0986", # too many boolean expressions
    "PLR0987", # too many boolean expressions
    "PLR0988", # too many boolean expressions
    "PLR0989", # too many boolean expressions
    "PLR0990", # too many boolean expressions
    "PLR0991", # too many boolean expressions
    "PLR0992", # too many boolean expressions
    "PLR0993", # too many boolean expressions
    "PLR0994", # too many boolean expressions
    "PLR0995", # too many boolean expressions
    "PLR0996", # too many boolean expressions
    "PLR0997", # too many boolean expressions
    "PLR0998", # too many boolean expressions
    "PLR0999", # too many boolean expressions
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["problems", "solutions", "tests"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR0915", "PLR0913", "PLR0912", "PLR0911"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=problems",
    "--cov=solutions",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "fast: marks tests as fast",
]

# Coverage configuration
[tool.coverage.run]
source = ["problems", "solutions"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
