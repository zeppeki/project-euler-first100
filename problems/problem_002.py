#!/usr/bin/env python3
"""
Problem 002: Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

Answer: 4613732
"""


def solve_naive(limit: int) -> int:
    """
    素直な解法
    フィボナッチ数列を生成しながら、偶数の項を合計

    時間計算量: O(n) - nはlimit以下のフィボナッチ数の個数
    空間計算量: O(1) - 定数個の変数のみ使用
    """
    if limit <= 0:
        return 0

    if limit < 2:
        return 0

    a, b = 1, 2  # フィボナッチ数列の最初の2項
    total = 0

    while b < limit:
        if b % 2 == 0:  # 偶数かチェック
            total += b
        a, b = b, a + b  # 次のフィボナッチ数を計算

    return total


def solve_optimized(limit: int) -> int:
    """
    最適化解法
    フィボナッチ数列の性質を利用：偶数項は3つおきに現れる

    フィボナッチ数列: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, ...
    偶数項: 2, 8, 34, 144, 610, ...

    偶数項のみを生成する漸化式: E(n) = 4 * E(n-1) + E(n-2)
    ただし、E(1) = 2, E(2) = 8

    時間計算量: O(log n) - 偶数項の個数は全体の約1/3
    空間計算量: O(1)
    """
    if limit <= 0:
        return 0

    if limit < 2:
        return 0

    # 偶数項のみを生成
    e1, e2 = 2, 8  # 最初の2つの偶数項
    total = 0

    # 最初の項（2）を処理
    if e1 < limit:
        total += e1

    # 2番目以降の偶数項を処理
    while e2 < limit:
        total += e2
        e1, e2 = e2, 4 * e2 + e1  # 偶数項の漸化式

    return total


def solve_mathematical(limit: int) -> int:
    """
    数学的解法
    フィボナッチ数列の偶数項の和を直接計算

    フィボナッチ数列の偶数項は: F(3), F(6), F(9), F(12), ...
    これらは F(3n) の形で表される

    時間計算量: O(log n)
    空間計算量: O(1)
    """
    if limit <= 0:
        return 0

    if limit < 2:
        return 0

    def fibonacci(n: int) -> int:
        """n番目のフィボナッチ数を計算"""
        if n <= 0:
            return 0
        if n == 1:
            return 1
        if n == 2:
            return 1

        # 動的計画法で計算
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

    total = 0
    n = 3  # 3番目から開始（最初の偶数項）

    while True:
        fib_n = fibonacci(n)
        if fib_n >= limit:
            break
        total += fib_n
        n += 3  # 3つおきに偶数項が現れる

    return total
