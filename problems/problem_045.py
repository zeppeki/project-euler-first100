#!/usr/bin/env python3
"""
Problem 045: Triangular, pentagonal, and hexagonal

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle: Tn = n(n+1)/2       1, 3, 6, 10, 15, ...
Pentagonal: Pn = n(3n-1)/2    1, 5, 12, 22, 35, ...
Hexagonal: Hn = n(2n-1)       1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

Answer: [Hidden]
"""

import math


def generate_triangle(n: int) -> int:
    """
    n番目の三角数を生成
    時間計算量: O(1)
    空間計算量: O(1)
    """
    return n * (n + 1) // 2


def generate_pentagonal(n: int) -> int:
    """
    n番目の五角数を生成
    時間計算量: O(1)
    空間計算量: O(1)
    """
    return n * (3 * n - 1) // 2


def generate_hexagonal(n: int) -> int:
    """
    n番目の六角数を生成
    時間計算量: O(1)
    空間計算量: O(1)
    """
    return n * (2 * n - 1)


def is_triangle(num: int) -> bool:
    """
    数が三角数かどうか判定
    三角数の逆公式: n = (-1 + sqrt(1 + 8*T)) / 2
    時間計算量: O(1)
    空間計算量: O(1)
    """
    if num <= 0:
        return False

    # 三角数の逆公式を使用
    discriminant = 1 + 8 * num
    sqrt_discriminant = int(math.sqrt(discriminant))

    # 平方根が整数でない場合
    if sqrt_discriminant * sqrt_discriminant != discriminant:
        return False

    # n = (-1 + sqrt(1 + 8*T)) / 2 が正の整数かチェック
    if (sqrt_discriminant - 1) % 2 != 0:
        return False

    n = (sqrt_discriminant - 1) // 2
    return n > 0 and generate_triangle(n) == num


def is_pentagonal(num: int) -> bool:
    """
    数が五角数かどうか判定
    五角数の逆公式: n = (1 + sqrt(1 + 24*P)) / 6
    時間計算量: O(1)
    空間計算量: O(1)
    """
    if num <= 0:
        return False

    # 五角数の逆公式を使用
    discriminant = 1 + 24 * num
    sqrt_discriminant = int(math.sqrt(discriminant))

    # 平方根が整数でない場合
    if sqrt_discriminant * sqrt_discriminant != discriminant:
        return False

    # n = (1 + sqrt(1 + 24*P)) / 6 が正の整数かチェック
    if (1 + sqrt_discriminant) % 6 != 0:
        return False

    n = (1 + sqrt_discriminant) // 6
    return n > 0 and generate_pentagonal(n) == num


def is_hexagonal(num: int) -> bool:
    """
    数が六角数かどうか判定
    六角数の逆公式: n = (1 + sqrt(1 + 8*H)) / 4
    時間計算量: O(1)
    空間計算量: O(1)
    """
    if num <= 0:
        return False

    # 六角数の逆公式を使用
    discriminant = 1 + 8 * num
    sqrt_discriminant = int(math.sqrt(discriminant))

    # 平方根が整数でない場合
    if sqrt_discriminant * sqrt_discriminant != discriminant:
        return False

    # n = (1 + sqrt(1 + 8*H)) / 4 が正の整数かチェック
    if (1 + sqrt_discriminant) % 4 != 0:
        return False

    n = (1 + sqrt_discriminant) // 4
    return n > 0 and generate_hexagonal(n) == num


def solve_naive() -> int:
    """
    素直な解法: 三角数を順次生成して五角数・六角数でもあるかチェック
    時間計算量: O(n) - 三角数の線形探索
    空間計算量: O(1)
    """
    n = 286  # T285 = 40755 の次から開始

    while True:
        triangle_num = generate_triangle(n)

        # 三角数が五角数かつ六角数かチェック
        if is_pentagonal(triangle_num) and is_hexagonal(triangle_num):
            return triangle_num

        n += 1

        # 安全のため上限を設定
        if n > 100000:
            raise ValueError("Solution not found within reasonable range")


def solve_optimized() -> int:
    """
    最適化解法: 六角数を生成して三角数・五角数でもあるかチェック
    六角数は三角数より少ないので効率的
    時間計算量: O(m) where m < n (六角数の方が少ない)
    空間計算量: O(1)
    """
    n = 144  # H143 = 40755 の次から開始

    while True:
        hexagonal_num = generate_hexagonal(n)

        # 六角数が三角数かつ五角数かチェック
        if is_triangle(hexagonal_num) and is_pentagonal(hexagonal_num):
            return hexagonal_num

        n += 1

        # 安全のため上限を設定
        if n > 50000:
            raise ValueError("Solution not found within reasonable range")


def solve_mathematical() -> int:
    """
    数学的解法: 数学的性質を利用した最適化
    すべての六角数は三角数であるという性質を利用
    時間計算量: O(m) - 六角数のみをチェック
    空間計算量: O(1)
    """
    # 数学的事実: すべての六角数は三角数
    # H_n = n(2n-1) = 2n² - n
    # T_k = k(k+1)/2 において k = 2n-1 とすると
    # T_{2n-1} = (2n-1)(2n)/2 = n(2n-1) = H_n

    n = 144  # H143 = 40755 の次から開始

    while True:
        hexagonal_num = generate_hexagonal(n)

        # 六角数は必ず三角数なので、五角数かどうかのみチェック
        if is_pentagonal(hexagonal_num):
            return hexagonal_num

        n += 1

        # 安全のため上限を設定
        if n > 50000:
            raise ValueError("Solution not found within reasonable range")
