#!/usr/bin/env python3
"""
Problem 029: Distinct powers

Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the
following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for
2 <= a <= 100 and 2 <= b <= 100?

Answer: 9183
"""


def solve_naive(limit: int = 100) -> int:
    """
    Generates all a^b and counts the number of distinct terms using a set.
    Time complexity: O(n^2 * log(b)) where n is the limit.
    Space complexity: O(n^2)
    """
    distinct_terms = set()
    for a in range(2, limit + 1):
        for b in range(2, limit + 1):
            distinct_terms.add(a**b)
    return len(distinct_terms)


def solve_optimized(limit: int = 100) -> int:
    """
    This problem is most easily solved with the naive approach in Python due to
    its efficient handling of large integers and hash sets. A mathematical
    approach involving prime factorization would be significantly more complex
    to implement and likely not much faster in a language like Python.
    Therefore, the optimized solution is the same as the naive one.
    """
    return solve_naive(limit)


def main() -> None:
    """Main function to run and compare solutions."""
    import time

    limit = 100

    print(f"Solving Problem 029 for limit = {limit}...")

    # --- Naive Solution ---
    start_time = time.time()
    naive_answer = solve_naive(limit)
    naive_time = time.time() - start_time
    print(f"Naive solution: {naive_answer} (took {naive_time:.6f} seconds)")

    # --- Optimized Solution ---
    start_time = time.time()
    optimized_answer = solve_optimized(limit)
    optimized_time = time.time() - start_time
    print(f"Optimized solution: {optimized_answer} (took {optimized_time:.6f} seconds)")


if __name__ == "__main__":
    main()
