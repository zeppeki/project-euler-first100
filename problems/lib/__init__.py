"""
Project Euler 共通ライブラリ

Project Euler問題解決で使用される共通関数のライブラリ。
重複コードの削減とコードの再利用性向上を目的とする。

モジュール:
- primes: 素数関連の関数
- math_utils: 数学的ユーティリティ関数
- combinatorics: 組み合わせ・順列関数
- sequences: 数列生成関数
- digits: 数字・文字列処理関数
- graph_algorithms: グラフ理論アルゴリズム
- dynamic_programming: 動的計画法
- matrix_utils: 行列・データ処理
- constraint_solving: 制約充足問題
- file_io: ファイルI/O統一処理
- data_structures: データ構造操作・グループ化
- number_theory: 高度な数論関数
"""

from .combinatorics import (
    combination_formula,
    get_combinations,
    get_combinations_with_replacement,
    get_permutations,
    get_permutations_with_replacement,
    multinomial_coefficient,
    permutation_formula,
)
from .data_structures import (
    PriorityQueue,
    UnionFind,
    create_adjacency_list,
    find_duplicates,
    find_unique_elements,
    flatten_nested_list,
    get_frequency_distribution,
    group_by,
    group_by_count,
    invert_dictionary,
    set_operations_summary,
    sliding_window,
)
from .constraint_solving import (
    backtrack_search,
    find_empty_cell,
    generate_permutations_with_constraints,
    is_complete_sudoku,
    is_magic_square,
    is_valid_sudoku_move,
    load_sudoku_puzzles,
    solve_constraint_satisfaction,
    solve_n_queens,
    solve_sudoku_backtrack,
)
from .digits import (
    are_permutations,
    concatenated_product,
    count_digits,
    digit_factorial_sum,
    digit_power_sum,
    get_digit_at_position,
    get_digit_signature,
    get_digit_signature_tuple,
    get_permutations_4digit,
    get_rotations,
    has_substring_divisibility,
    is_circular_prime_candidate,
    is_pandigital,
    is_pandigital_0_to_9,
    is_pandigital_1_to_9,
    reverse_number,
    sum_of_digits,
)
from .dynamic_programming import (
    Memoization,
    coin_change_ways,
    edit_distance,
    fibonacci_dp,
    knapsack_01,
    longest_increasing_subsequence,
    max_path_sum_triangle,
    min_path_sum_matrix,
    parse_triangle,
    partition_count,
)
from .file_io import (
    get_file_stats,
    load_base_exp_data,
    load_cipher_data,
    load_keylog_data,
    load_matrix_data,
    load_names_file,
    load_poker_hands,
    load_problem_data,
    load_roman_numerals,
    load_triangle_data,
    load_words_file,
    parse_structured_file,
    safe_file_reader,
    write_results_to_file,
)
from .graph_algorithms import (
    build_dependency_graph,
    dijkstra_shortest_path,
    find_strongly_connected_components,
    has_cycle,
    topological_sort,
)
from .math_utils import (
    count_divisors,
    factorial,
    factorial_builtin,
    fibonacci,
    gcd,
    get_divisors,
    get_hexagonal_number,
    get_pentagonal_number,
    get_proper_divisors_sum,
    get_triangular_number,
    is_abundant,
    is_palindrome,
    lcm,
    prime_factorization,
)
from .matrix_utils import (
    create_matrix,
    find_max_product_in_grid,
    get_matrix_neighbors,
    load_matrix,
    matrix_apply,
    matrix_pad,
    matrix_rotate_90,
    matrix_slice,
    matrix_to_string,
    matrix_transpose,
    parse_csv_matrix,
    validate_matrix_dimensions,
)
from .primes import (
    count_distinct_prime_factors,
    generate_primes,
    get_prime_factors,
    is_prime,
    is_prime_optimized,
    is_truncatable_prime,
    sieve_of_eratosthenes,
)
from .sequences import (
    fibonacci_generator,
    generate_heptagonal,
    generate_hexagonal,
    generate_octagonal,
    generate_pentagonal,
    generate_square,
    generate_triangle,
    hexagonal_generator,
    is_hexagonal_number,
    is_pentagonal_number,
    is_triangle_number,
    pentagonal_generator,
    triangle_generator,
)
from .number_theory import (
    carmichael_lambda,
    chinese_remainder_theorem,
    continued_fraction_sqrt,
    convergents_from_continued_fraction,
    euler_totient,
    euler_totient_sieve,
    extended_gcd,
    is_carmichael_number,
    jacobi_symbol,
    mobius_function,
    modular_exponentiation,
    modular_inverse,
    solve_pell_equation,
)

__all__ = [
    # primes module
    "is_prime",
    "is_prime_optimized",
    "sieve_of_eratosthenes",
    "generate_primes",
    "get_prime_factors",
    "count_distinct_prime_factors",
    "is_truncatable_prime",
    # math_utils module
    "gcd",
    "lcm",
    "factorial",
    "factorial_builtin",
    "prime_factorization",
    "get_divisors",
    "count_divisors",
    "get_proper_divisors_sum",
    "is_abundant",
    "is_palindrome",
    "fibonacci",
    "get_triangular_number",
    "get_pentagonal_number",
    "get_hexagonal_number",
    # combinatorics module
    "combination_formula",
    "permutation_formula",
    "get_permutations",
    "get_combinations",
    "get_permutations_with_replacement",
    "get_combinations_with_replacement",
    "multinomial_coefficient",
    # sequences module
    "generate_triangle",
    "generate_pentagonal",
    "generate_hexagonal",
    "generate_octagonal",
    "generate_square",
    "generate_heptagonal",
    "fibonacci_generator",
    "triangle_generator",
    "pentagonal_generator",
    "hexagonal_generator",
    "is_triangle_number",
    "is_pentagonal_number",
    "is_hexagonal_number",
    # digits module
    "get_digit_signature",
    "get_digit_signature_tuple",
    "is_pandigital",
    "is_pandigital_1_to_9",
    "is_pandigital_0_to_9",
    "reverse_number",
    "get_rotations",
    "get_permutations_4digit",
    "are_permutations",
    "digit_factorial_sum",
    "digit_power_sum",
    "concatenated_product",
    "get_digit_at_position",
    "has_substring_divisibility",
    "is_circular_prime_candidate",
    "count_digits",
    "sum_of_digits",
    # graph_algorithms module
    "build_dependency_graph",
    "topological_sort",
    "dijkstra_shortest_path",
    "has_cycle",
    "find_strongly_connected_components",
    # dynamic_programming module
    "parse_triangle",
    "max_path_sum_triangle",
    "min_path_sum_matrix",
    "coin_change_ways",
    "partition_count",
    "longest_increasing_subsequence",
    "Memoization",
    "fibonacci_dp",
    "edit_distance",
    "knapsack_01",
    # matrix_utils module
    "load_matrix",
    "parse_csv_matrix",
    "get_matrix_neighbors",
    "matrix_transpose",
    "matrix_rotate_90",
    "find_max_product_in_grid",
    "validate_matrix_dimensions",
    "matrix_slice",
    "matrix_pad",
    "matrix_to_string",
    "create_matrix",
    "matrix_apply",
    # constraint_solving module
    "load_sudoku_puzzles",
    "is_valid_sudoku_move",
    "find_empty_cell",
    "solve_sudoku_backtrack",
    "is_complete_sudoku",
    "solve_n_queens",
    "solve_constraint_satisfaction",
    "is_magic_square",
    "generate_permutations_with_constraints",
    "backtrack_search",
    # file_io module
    "load_problem_data",
    "load_names_file",
    "load_words_file",
    "load_poker_hands",
    "load_keylog_data",
    "load_triangle_data",
    "load_matrix_data",
    "load_cipher_data",
    "load_roman_numerals",
    "load_base_exp_data",
    "safe_file_reader",
    "parse_structured_file",
    "write_results_to_file",
    "get_file_stats",
    # data_structures module
    "group_by",
    "group_by_count",
    "find_duplicates",
    "find_unique_elements",
    "get_frequency_distribution",
    "set_operations_summary",
    "PriorityQueue",
    "UnionFind",
    "create_adjacency_list",
    "invert_dictionary",
    "flatten_nested_list",
    "sliding_window",
    # number_theory module
    "extended_gcd",
    "modular_inverse",
    "chinese_remainder_theorem",
    "modular_exponentiation",
    "euler_totient",
    "euler_totient_sieve",
    "mobius_function",
    "jacobi_symbol",
    "continued_fraction_sqrt",
    "convergents_from_continued_fraction",
    "solve_pell_equation",
    "carmichael_lambda",
    "is_carmichael_number",
]
