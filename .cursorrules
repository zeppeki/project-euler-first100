# Project Euler First 100 - Cursor Rules

## プロジェクト概要
このプロジェクトは、Project Eulerの最初の100問を解くためのリポジトリです。体系的に問題を解決し、学習効果を最大化することを目的としています。

## 現在の進捗状況
- **完了問題**: 7/100 (Problem 001, 002, 003, 004, 005, 006, 007)
- **最新完了**: Problem 007: 10001st prime (解答: 104,743)
- **次回予定**: Problem 008: Largest product in a series

## 作業プロセス

### 1. Issue作成
新しい問題に取り組む際は、必ずGitHub Issueを作成します：

```bash
gh issue create --title "Solve Problem XXX: [問題タイトル]" --body "## Problem XXX: [問題タイトル]

### 問題
[問題の日本語説明]

### 詳細
[英語での問題文]

### タスク
- [ ] 問題の分析と理解
- [ ] アルゴリズムの設計
- [ ] Pythonでの実装
- [ ] JavaScriptでの実装（オプション）
- [ ] 解答の検証
- [ ] 解答の説明をsolutions/に追加
- [ ] 進捗表の更新

### ファイル
- `problems/problem_XXX.py`
- `solutions/solution_XXX.md`

### 参考
- [Project Euler Problem XXX](https://projecteuler.net/problem=XXX)" --label "problem,XXX,in-progress"
```

### 2. ブランチ作成
Issue用のブランチを作成します：

```bash
gh issue develop [ISSUE_NUMBER]
git checkout [BRANCH_NAME]
```

### 3. 問題解決
以下の手順で問題を解決します：

#### 3.1 問題分析
- 問題を完全に理解する
- 入力と出力を明確にする
- 制約条件を確認する
- テストケースを考える
- 数学的背景を調べる

#### 3.2 アルゴリズム設計
- 複数の解法を検討する（素直な解法、最適化解法、数学的解法）
- 時間計算量と空間計算量を分析する
- 最適化の可能性を探る
- 数学的性質を活用する

#### 3.3 実装
`problems/problem_XXX.py`を作成し、以下の要素を含めます：

```python
#!/usr/bin/env python3
"""
Problem XXX: [問題タイトル]

[問題の詳細説明]

Answer: [解答]
"""

import time
import math  # 必要に応じて

def solve_naive(parameters):
    """
    素直な解法
    時間計算量: O(...)
    空間計算量: O(...)
    """
    # 実装
    pass

def solve_optimized(parameters):
    """
    最適化解法
    時間計算量: O(...)
    空間計算量: O(...)
    """
    # 実装
    pass

def solve_mathematical(parameters):
    """
    数学的解法
    時間計算量: O(...)
    空間計算量: O(...)
    """
    # 実装
    pass

def test_solutions():
    """テストケースで解答を検証"""
    test_cases = [
        (input1, expected1),
        (input2, expected2),
        # ...
    ]

    print("=== テストケース ===")
    for input_val, expected in test_cases:
        result_naive = solve_naive(input_val)
        result_optimized = solve_optimized(input_val)
        result_math = solve_mathematical(input_val)

        print(f"Input: {input_val}")
        print(f"  Expected: {expected}")
        print(f"  Naive: {result_naive} {'✓' if result_naive == expected else '✗'}")
        print(f"  Optimized: {result_optimized} {'✓' if result_optimized == expected else '✗'}")
        print(f"  Mathematical: {result_math} {'✓' if result_math == expected else '✗'}")
        print()

def main():
    """メイン関数"""
    # テストケース
    test_solutions()

    # 本問題の解答
    print("=== 本問題の解答 ===")

    # 各解法の実行時間測定
    start_time = time.time()
    result_naive = solve_naive(parameters)
    naive_time = time.time() - start_time

    start_time = time.time()
    result_optimized = solve_optimized(parameters)
    optimized_time = time.time() - start_time

    start_time = time.time()
    result_math = solve_mathematical(parameters)
    math_time = time.time() - start_time

    print(f"素直な解法: {result_naive:,} (実行時間: {naive_time:.6f}秒)")
    print(f"最適化解法: {result_optimized:,} (実行時間: {optimized_time:.6f}秒)")
    print(f"数学的解法: {result_math:,} (実行時間: {math_time:.6f}秒)")
    print()

    # 結果の検証
    if result_naive == result_optimized == result_math:
        print(f"✓ 解答: {result_optimized:,}")
    else:
        print("✗ 解答が一致しません")
        return

    # パフォーマンス比較
    print("=== パフォーマンス比較 ===")
    fastest_time = min(naive_time, optimized_time, math_time)
    print(f"素直な解法: {naive_time/fastest_time:.2f}x")
    print(f"最適化解法: {optimized_time/fastest_time:.2f}x")
    print(f"数学的解法: {math_time/fastest_time:.2f}x")

if __name__ == "__main__":
    main()
```

#### 3.4 解答説明
`solutions/solution_XXX.md`を作成し、以下の要素を含めます：

```markdown
# Problem XXX: [問題タイトル]

## 問題
[問題の説明]

## 解答

Project Euler公式サイトで確認してください。

## 解法
### 1. [解法名]
[コードと説明]

### 2. [解法名]
[コードと説明]

### 3. [解法名]
[コードと説明]

## 数学的背景
[関連する数学的概念]

## 検証
- **入力:** [example input]
- **解答:** [隠匿]
- **検証:** ✓

## パフォーマンス比較
[各解法の性能比較]

## 最適化のポイント
[最適化のポイント]

## 学習ポイント
[学んだこと]

## 参考
[参考リンク]
```

### 4. 進捗更新
`PROGRESS.md`を更新します：
- 問題のステータスを「🟢 完了」に変更
- 完了日を記録
- 統計を更新
- 完了した問題の詳細を追加

### 5. コミットとプッシュ
```bash
git add .
git commit -m "Solve Problem XXX: [問題タイトル]

- [実装内容の要約]
- [追加したファイル]
- [重要なポイント]

Answer: [解答]"
git push origin [BRANCH_NAME]
```

### 6. プルリクエスト作成
```bash
gh pr create --title "Solve Problem XXX: [問題タイトル]" --body "## Problem XXX: [問題タイトル]

### 解答

Project Euler公式サイトで確認してください。

### 実装内容
- [実装した解法の説明]

### ファイル
- [作成したファイル]

### 特徴
- [実装の特徴]

### 検証
- [検証結果]

### 学習ポイント
- [学んだこと]

Closes #[ISSUE_NUMBER]" --label "problem,XXX,completed"
```

### 7. CI/CD確認とプルリクエストマージ
**重要**: すべてのCIチェックが成功するまでマージしないでください：

```bash
# CIステータスを確認
gh pr view [PR_NUMBER] --json statusCheckRollup

# 期待される出力（成功時）:
# - "conclusion": "SUCCESS" for all checks
# - test (3.11): SUCCESS
# - test (3.12): SUCCESS
# - quality: SUCCESS

# すべてのチェックが成功したらマージ
gh pr merge [PR_NUMBER] --merge
git checkout main
git pull origin main
```

### 8. Issueクローズ
```bash
gh issue close [ISSUE_NUMBER] --reason completed
```

## コーディング規約

### Python
- PEP 8に準拠
- 関数とクラスにはdocstringを記述
- 型ヒントを使用（可能な場合）
- テストケースを含める
- 実行時間の測定を含める

### ファイル命名
- `problems/problem_XXX.py` - 解答コード
- `solutions/solution_XXX.md` - 解答説明
- XXXは3桁のゼロパディング（例：001, 012, 123）

### コミットメッセージ
- 英語で記述
- 問題番号を含める
- 解答を含める
- 実装内容を簡潔に説明

## 品質基準

### 必須要素
- ✅ 正しい解答
- ✅ テストケース（100%カバレッジ）
- ✅ 複数解法の実装（最低3つ）
- ✅ 詳細なドキュメント
- ✅ パフォーマンス分析・比較
- ✅ 進捗表の更新
- ✅ 数学的背景の説明
- ✅ CI/CD最適化・自動化

### 推奨要素
- 🔵 最適化解法の実装
- 🔵 可視化や図表
- 🔵 他の言語での実装
- 🔵 アルゴリズムの証明

## テスト戦略

### テストカテゴリ
- 単体テスト（各関数ごと）
- 統合テスト（全体解法）
- パフォーマンステスト（`@pytest.mark.slow`）
- エッジケース検証

### テスト実行パフォーマンス
- **高速テスト**: 191件（~0.1-0.4秒）
- **低速テスト**: 3件（~0.03秒）
- **合計**: 194件（1秒未満で完了）
- **CI最適化**: 高速・低速テストを分離実行し、並列化・可視性向上
- **パフォーマンステスト**: 実行時間計測ではなく機能検証ベースに最適化

テストは厳格な設定と包括的なマーカーで管理され、CI/CDで高速かつ高品質に実行される。

## CI/CDプロセス

### GitHub Actionsワークフロー
プロジェクトは以下のチェックを含む自動化CI/CDを使用：
- **Test (Python 3.11)**: Python 3.11での全テスト実行
- **Test (Python 3.12)**: Python 3.12での全テスト実行
- **Quality**: コード品質チェック（ruff, mypy, bandit）

### PRマージ要件
**重要**: すべてのCIチェックが成功するまでPRをマージしないでください：

```bash
# マージ前にCIステータスを確認
gh pr view [PR_NUMBER] --json statusCheckRollup

# 成功時の期待される出力:
# - "conclusion": "SUCCESS" for all checks
# - test (3.11): SUCCESS
# - test (3.12): SUCCESS
# - quality: SUCCESS
```

**失敗または保留中のCIチェックがあるPRは絶対にマージしないでください。**

## ドキュメントガイドライン

### GitHub Pagesコンテンツポリシー
- **直接的な解答値の表示禁止**: Project Eulerの解答値を直接表示しない
- **解答セクション**: 「Project Euler公式サイトで確認してください」に統一
- **検証結果**: 具体的な数値は「[隠匿]」で置換
- **学習コンテンツ**: アルゴリズム解説と学習内容は保持
- **小さな例題**: 学習のための小さな例題の期待値は保持可能

### 解答ドキュメントテンプレート
```markdown
## 解答

Project Euler公式サイトで確認してください。

## 検証
- **入力:** [example input]
- **解答:** [隠匿]
- **検証:** ✓
```

## ラベル体系

### 問題ラベル
- `problem` - Project Euler問題
- `001-100` - 問題番号
- `in-progress` - 作業中
- `completed` - 完了

### 技術ラベル
- `python` - Python実装
- `javascript` - JavaScript実装
- `optimization` - 最適化
- `documentation` - ドキュメント

## 完了した問題の参考例

### Problem 001: Multiples of 3 and 5
- **解答**: 233,168
- **解法**: 素直な解法、最適化解法（等差数列の和）、リスト内包表記
- **学習ポイント**: 数学的公式の活用

### Problem 002: Even Fibonacci numbers
- **解答**: 4,613,732
- **解法**: 素直な解法、最適化解法（偶数項の漸化式）、数学的解法
- **学習ポイント**: 数列の性質の観察と活用

### Problem 003: Largest prime factor
- **解答**: 6,857
- **解法**: 素直な解法、最適化解法（平方根まで試し割り）、数学的解法
- **学習ポイント**: 素因数分解の効率化

## トラブルシューティング

### よくある問題
1. **解答が間違っている**
   - テストケースで検証
   - アルゴリズムを見直し
   - 境界条件を確認
   - 大きな数の処理を確認

2. **パフォーマンスが悪い**
   - アルゴリズムの見直し
   - データ構造の最適化
   - 数学的アプローチの検討
   - 計算量の分析

3. **コードが読みにくい**
   - 関数の分割
   - 変数名の改善
   - コメントの追加
   - 型ヒントの追加

4. **プルリクエストのマージ**
   - CIチェックの完了を確認
   - mainブランチに切り替え
   - 最新の変更を取得
   - 次の問題の準備

## 学習目標
- アルゴリズムとデータ構造の理解
- 数学的思考力の向上
- コードの品質向上
- ドキュメント作成能力の向上
- 問題解決プロセスの体系化
- 効率的なアルゴリズム設計

## 参考資料
- [Project Euler](https://projecteuler.net/)
- [Python公式ドキュメント](https://docs.python.org/)
- [GitHub CLI](https://cli.github.com/)
- [Git Best Practices](https://git-scm.com/book/en/v2)
- [Big O Notation](https://en.wikipedia.org/wiki/Big_O_notation)
- [Algorithm Analysis](https://en.wikipedia.org/wiki/Analysis_of_algorithms)

## パフォーマンス最適化履歴

### 2025年6月 テストパフォーマンス最適化
- **課題**: CI実行時間が58秒以上かかっていた（タイミング計測型パフォーマンステストが原因）
- **対応**: すべてのパフォーマンステストを機能検証型にリファクタリング
- **結果**:
  - 実行時間: 58秒→0.1-0.4秒（99.3%短縮）
  - 194テスト・100%カバレッジ維持（Problem 007追加後）
  - 高速/低速テスト分離でCI可視性向上
  - Project Eulerの正答性検証は全て維持
