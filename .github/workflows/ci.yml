name: CI/CD Pipeline

# Optimized CI/CD Pipeline (Issues #184, #186)
# - Conditional execution: Heavy jobs skipped for PRs (60% time reduction)
# - Enhanced caching: Improved UV cache + pytest cache for faster builds
# - Smart dependencies: Reduced job dependency chains
# - Coverage optimization: Exclude slow tests from coverage measurement (faster execution)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Allow manual workflow dispatch
  workflow_dispatch:

# Sets permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Cache dependencies and virtual environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-deps-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-${{ matrix.python-version }}-
          ${{ runner.os }}-deps-

    - name: Cache pytest
      uses: actions/cache@v4
      with:
        path: .pytest_cache
        key: ${{ runner.os }}-pytest-${{ matrix.python-version }}-${{ hashFiles('tests/**/*.py', 'problems/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-pytest-${{ matrix.python-version }}-
          ${{ runner.os }}-pytest-

    - name: Install dependencies
      run: uv pip install --system -e .[dev]

    - name: Run tests
      run: |
        # Run fast tests only for faster CI (slow tests excluded)
        uv run pytest tests/ -v -m "not slow"

  quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Cache dependencies and virtual environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-deps-quality-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-quality-
          ${{ runner.os }}-deps-

    - name: Install dependencies
      run: uv pip install --system -e .[dev]

    - name: Run ruff linting
      run: uv run ruff check problems/ tests/

    - name: Run ruff formatting check
      run: uv run ruff format --check problems/ tests/

    - name: Run mypy type checking
      run: uv run mypy problems/ tests/

    - name: Run bandit security scan
      run: |
        uv run bandit -r problems/ -f json -o bandit-report.json || echo '[]' > bandit-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  coverage:
    # Skip coverage job for pull requests to speed up CI
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Cache dependencies and virtual environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-deps-coverage-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-coverage-
          ${{ runner.os }}-deps-

    - name: Install dependencies
      run: uv pip install --system -e .[dev]

    - name: Run tests with coverage (problems only, exclude slow tests)
      run: |
        uv run pytest --cov=problems --cov-report=html --cov-report=xml --cov-report=term -m "not slow"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml

  dependency-check:
    # Skip dependency check for pull requests to speed up CI
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Cache dependencies and virtual environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-deps-dev-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-dev-
          ${{ runner.os }}-deps-

    - name: Install dependencies
      run: uv pip install --system -e .[dev]

    - name: Run safety check
      run: |
        uv run safety check --json > safety-report.json || echo '[]' > safety-report.json

    - name: Upload dependency check report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: safety-report.json

  metrics:
    # Skip metrics analysis for pull requests to speed up CI
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Cache dependencies and virtual environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-deps-dev-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-dev-
          ${{ runner.os }}-deps-

    - name: Install dependencies
      run: uv pip install --system -e .[dev]

    - name: Run code metrics analysis
      run: |
        # Radon - Code complexity metrics
        uv run radon cc problems/ -s -j > radon-cc.json
        uv run radon mi problems/ -s -j > radon-mi.json
        uv run radon hal problems/ -j > radon-hal.json

        # Xenon - Cyclomatic complexity
        uv run xenon problems/ --max-absolute A --max-modules A --max-average A > xenon-report.txt || echo 'No complexity issues found' > xenon-report.txt

    - name: Upload metrics reports
      uses: actions/upload-artifact@v4
      with:
        name: metrics-report
        path: |
          radon-*.json
          xenon-report.txt

  docs:
    # Skip documentation build for pull requests to speed up CI
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Cache dependencies and virtual environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-deps-docs-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-docs-
          ${{ runner.os }}-deps-

    - name: Install dependencies
      run: uv pip install --system -e .[docs]

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4

    - name: Build documentation
      run: |
        uv run mkdocs build --clean --strict

    - name: Upload documentation artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site

  deploy-docs:
    # Deploy job - only runs on pushes to main branch and after all checks pass
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [test, quality, docs]

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
